# -*- coding: utf-8 -*-
"""Copa_dos_Dados.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BL7xXXUE2sHzfBm-Y43VHnrccHq36iwi

## PASSOS PROJETO 

O projeto tem por objetivo a construçao de um modelo de aprendizagem de maquina para prever o resultado da Copa do Mundo de 2022. 

Para o desenvolvimento do projeto, alguns passos foram necessarios, os quais estao elencados a seguir:

*   Primeiro passo é o entendimento do problema.
*   Em seguida a coleta de dados.

### Coleta de Dados 

O banco de dados usado é o mongoDB. Dessa forma o pymongo é usado para a conexao.

#### Instalando bibliotecas
"""

!pip install pymongo

pip install pymongo==2.8 --upgrade

"""#### Importando bibliotecas"""

#MongoDb Conexion 
from pymongo import MongoClient

#Exploratory Data Analysis
import pandas as pd
import json

#Data Visualisation 
import matplotlib.pyplot as plt
import seaborn as sns

sns.set_style('darkgrid')

import warnings
warnings.filterwarnings('ignore')

#!python --version
!pip install dnspython

!pip install pymongo[srv]

#!pip install pymongo[tls]

client = MongoClient('mongodb://copadosdados:copadosdados@cluster0.zhspqir.mongodb.net/?retryWrites=true&w=majority')

"""Para nao dar erro, é preciso que esse cliente seja executado apos as instalaçoes anteriores."""

print(client)

"""Nessa parte é preciso lembrar que se segue um fluxo respeitando niveis: acessa ao banco, depois as collections e depois os dados. """

db = client.get_database('copasdomundo_db')

"""#### Tabelas Jogos Copas do Mundo """

collection_jogos_copasdomundo = db.jogos_copasdomundo

# teste : Inserçao de um novo dado na collection jogos_copadomundo
#novo_jogo= {
#    "Ano":1930,
#    "Data":"14 Jul 1930 - 14:50",
#    "Fase":"Group 3",
#    "Estadio":"Pocitos",
#    "Cidade":"Montevideo",
#    "TimeDaCasa":"Romania",
#    "GolsTimeDaCasa":3,
#    "GolsTimeVisitante":1,
#    "TimeVisitante":"Peru",
#    "Publico":2549,
#    "GolsTimeCasaAntesIntervalo":1,
#    "GolsTimeVisitanteAntesIntervalo":0,
#    "TimeDaCasaIniciais":"ROU",
#    "TimeVisitanteIniciais":"PER"
#    }

#collection_jogos_copadomundo.insert_one(novo_jogo)

"""Subir os 3 arquivos json que sao trabalhados aqui na parte de arquivos.  """

#!git clone 'https://github.com/SaraBCoutinho/Project_Copa_dos_Dados/tree/main/data'

with open("/content/jogos_copasdomundo.json") as f:
  jogos_copasdomundo = json.load(f)

collection_jogos_copasdomundo.insert_many(jogos_copasdomundo)

collection_jogos_copasdomundo.count_documents({})

"""Dentro da documentaçao do pymongo ver o parametro que insere o arquivo sem contar com as duplicadas."""

#list(collection_jogos_copadomundo.find())

"""#### Coleta de Dados (Jogos da Copa Mundo)"""

df_jogoscopasdomundo = pd.DataFrame(list(collection_jogos_copadomundo.find()))
df_jogoscopasdomundo.head()

"""#### Tabela - Jogadores das Copas do Mundo"""

collection_jogadores_copadomundo = db.jogadores_copasdomundo

with open("/content/jogadores_copasdomundo.json") as f:
  jogadores_copasdomundo = json.load(f)

collection_jogadores_copadomundo.insert_many(jogadores_copasdomundo)

df_jogadores_copasdomundo = pd.DataFrame(list(collection_jogadores_copadomundo.find()))

df_jogadores_copasdomundo.head()

"""#### Tabela - Campeoes das Copas do Mundo"""

collection_campeoes_copadomundo = db.campeoes_copasdomundo
with open("/content/campeoes_copasdomundo.json") as f:
  campeoes_copasdomundo = json.load(f)

collection_campeoes_copadomundo.insert_many(campeoes_copasdomundo)

df_campeoes_copasdomundo = pd.DataFrame(list(collection_campeoes_copadomundo.find()))

df_campeoes_copasdomundo.head()

"""### Analise exploratoria dos dados"""

df_jogoscopasdomundo.info()

df_campeoes_copasdomundo.info()

df_campeoes_copasdomundo['Ano'].count()

print("Foram realizadas", df_campeoes_copasdomundo['Ano'].count(), "Copas do mundo" )

df_jogoscopasdomundo.info()

df_jogoscopasdomundo['Data']

df_jogoscopasdomundo['Data'] = pd.to_datetime(df_jogoscopasdomundo['Data'])

df_jogoscopasdomundo.info()

"""Pergunta-se quantas vezes o time que estava jogando em casa venceu a final?"""

df_jogoscopasdomundo.head()

df_finaiscopasdomundo = df_jogoscopasdomundo[df_jogoscopasdomundo['Fase'] == 'Final']

df_finaiscopasdomundo['Fase'].unique()

numero_partidas_timecasaganhou = df_finaiscopasdomundo[(df_finaiscopasdomundo['GolsTimeDaCasa'] > df_finaiscopasdomundo['GolsTimeVisitante'])].shape[0]

numero_partidas_timevisitanteganhou = df_finaiscopasdomundo[(df_finaiscopasdomundo['GolsTimeDaCasa'] < df_finaiscopasdomundo['GolsTimeVisitante'])].shape[0]

print(numero_partidas_timecasaganhou/(numero_partidas_timevisitanteganhou + numero_partidas_timecasaganhou) * 100)

"""Quem sao os maiores vencedores?"""

df_campeoes_copasdomundo['Vencedor'].value_counts()

plt.figure(figsize=(15, 5))
plt.title("Seleções que venceram a Copa do Mundo")
sns.countplot(df_campeoes_copasdomundo['Vencedor'])

Quem sao os vice-campeoes?

df_campeoes_copasdomundo['Segundo'].value_counts()

plt.figure(figsize=(15, 5))
plt.title("Seleções que mais ficaram em segundo lugar na Copa do Mundo")
sns.countplot(df_campeoes_copasdomundo['Segundo'])

df_jogoscopasdomundo.head()

df_jogoscopasdomundo['TotalGols'] = df_jogoscopasdomundo['GolsTimeDaCasa'] + df_jogoscopasdomundo['GolsTimeVisitante']

df_jogoscopasdomundo.head()

df_jogoscopasdomundo['TotalGols'].describe().round(2)

df_jogoscopasdomundo[df_jogoscopasdomundo['TotalGols'] == 12]

plt.figure(figsize=(15,10))
plt.title("Média de Gols", color='black')
sns.boxplot(df_jogoscopasdomundo['Ano'], df_jogoscopasdomundo['TotalGols'] )

"""#### Modelo de Aprendizagem """

df_jogos_copasdomundo['TimeDaCasa'] = df_jogos_copasdomundo['TimeDaCasa'].replace(['Germany FR'], 'Germany')
df_jogos_copasdomundo['TimeDaCasa'] = df_jogos_copasdomundo['TimeDaCasa'].replace(['German DR'], 'Germany')
df_jogos_copasdomundo['TimeDaCasa'] = df_jogos_copasdomundo['TimeDaCasa'].replace(["C�te d'Ivoire"], "Côte d'Ivoire")

df_jogos_copasdomundo['TimeVisitante'] = df_jogos_copasdomundo['TimeVisitante'].replace(['Germany FR'], 'Germany')
df_jogos_copasdomundo['TimeVisitante'] = df_jogos_copasdomundo['TimeVisitante'].replace(['German DR'], 'Germany')
df_jogos_copasdomundo['TimeVisitante'] = df_jogos_copasdomundo['TimeVisitante'].replace(["C�te d'Ivoire"], "Côte d'Ivoire")

df_jogos_copasdomundo['TimeDaCasa'].unique()

nome_time = {}
index = 0

for idx, jogo in df_jogos_copasdomundo.iterrows():
  nome = jogo['TimeDaCasa']
  if(nome not in nome_time.keys()):
      nome_time[nome] = index
      index += 1
  nome = jogo['TimeVisitante']
  if(nome not in nome_time.keys()):
    nome_time[nome] = index
    index += 1

#nome_time

df_jogos_copasdomundo.head()

df_jogos_copasdomundo.columns

colunas_partidas = df_jogos_copasdomundo.drop(['_id', 'Data', 'Estadio', 'Publico','TimeDaCasaIniciais', 'TimeVisitanteIniciais', 'GolsTimeCasaAntesIntervalo', 'GolsTimeVisitanteAntesIntervalo',
            'Cidade', 'Fase'], 1)

colunas_partidas.head()

colunas_partidas['QuantidadeTitulosTimeDaCasa'] = 0
colunas_partidas['QuantidadeTitulosVisitante'] = 0

colunas_partidas.head()

#colunas_partidas.head()
df_campeoes_copasdomundo['Vencedor']

df_campeoes_copasdomundo['Vencedor'] = df_campeoes_copasdomundo['Vencedor'].replace(['Germany FR'], 'Germany')

campeoes = df_campeoes_copasdomundo['Vencedor'].value_counts()

campeoes

colunas_partidas.head()

colunas_partidas['QuantidadeTitulosTimeDaCasa'] = 0
colunas_partidas['QuantidadeTitulosVisitante'] = 0

def contagem_titulo(df):
  if(campeoes.get(df['TimeDaCasa']) != None):
    df['QuantidadeTitulosTimeDaCasa'] = campeoes.get(df['TimeDaCasa'])
  if(campeoes.get(df['TimeVisitante']) != None):
    df['QuantidadeTitulosVisitante'] = campeoes.get(df['TimeVisitante'])
  return df

colunas_partidas = colunas_partidas.apply(contagem_titulo, axis='columns')

colunas_partidas = colunas_partidas[['Ano', 'TimeDaCasa', 'GolsTimeDaCasa', 'TimeVisitante', 'GolsTimeVisitante', 'QuantidadeTitulosTimeDaCasa', 'QuantidadeTitulosVisitante']]

colunas_partidas.head()

#colunas_partidas.head()
colunas_partidas['Vencedor'] = '-'

colunas_partidas.head()

def procura_vencedor(df):
    if(int(df['GolsTimeDaCasa']) == int(df['GolsTimeVisitante'])):
        df['Vencedor'] = 0
    elif(int(df['GolsTimeDaCasa']) > int(df['GolsTimeVisitante'])):
        df['Vencedor'] = 1
    else:
        df['Vencedor'] = 2
    return df

colunas_partidas = colunas_partidas.apply(procura_vencedor, axis='columns')

colunas_partidas.head()

#substituir nome da equipe por id no dicionário team_name
nome_time

def substituir_por_id(df):
    df['TimeDaCasa'] = nome_time[df['TimeDaCasa']]
    df['TimeVisitante'] = nome_time[df['TimeVisitante']]
    return df

id_time = colunas_partidas.apply(substituir_por_id, axis='columns')

id_time.head()

id_time = id_time.drop(['Ano', 'GolsTimeDaCasa', 'GolsTimeVisitante'], 1)

id_time.head()

#Etapa de treinamento
import numpy as np

X = id_time.loc[:,['TimeDaCasa', 'TimeVisitante', 'QuantidadeTitulosTimeDaCasa','QuantidadeTitulosVisitante']]

X = np.array(X).astype('float64')

y = colunas_partidas.loc[:,['Vencedor']]
y = np.array(y).astype('int')
y = np.reshape(y,(1,916))
y = y[0]

y

X,y = shuffle(X,y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)

print(y_train)

svm_model = SVC(kernel='rbf', class_weight='balanced', probability=True)
svm_model.fit(X, y)

print("Predicting on the test set")
y_pred = svm_model.predict(X_test)
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred, labels=range(3)))

#prediçao
nome_time

def predicao(timeA, timeB):
  idA = nome_time[timeA]
  idB = nome_time[timeB]
  campeaoA = campeoes.get(timeA) if campeoes.get(timeA) != None else 0
  campeaoB = campeoes.get(timeB) if campeoes.get(timeB) != None else 0

  x = np.array([idA, idB, campeaoA, campeaoB]).astype('float64')
  x = np.reshape(x, (1,-1))
  _y = svm_model.predict_proba(x)[0]

  text = ('Chance de ' +timeA+' vencer '+timeB+' é {}\nChance de '+timeB+' vencer '+timeA+' e {}\nChance de '+timeA+' e '+timeB+' empatar é {}').format(_y[1]*100,_y[2]*100,_y[0]*100)
  return _y[0], text

prob1, text1 = predicao('France', 'Brazil')
print(text1)

import joblib

joblib.dump(svm_model, "model.pkl")

